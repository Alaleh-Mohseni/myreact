4.1-جواب: package.json فایلی حاوی اطلاعاتی در زمینه نام برنامه، نسخه برنامه و dependencies مختلف است.
فایل package.json حاوی:
1-این فایل بسته هایی که پروژه ما به آن وابسته است را لیست می کند.
2-نسخه هایی از یک بسته را که پروژه ما می تواند استفاده کند را مشخص می کند.
3-ساخت دوباره برنامه و اشتراک گذاری آن با دیگر توسعه دهندگان را آسان تر می کند.
Name:
– نام پکیج را تعیین میکند. 
نام باید کمتر از 214 کاراکتر باشد و نباید فاصله داشته باشد و تنها میتواند شامل حروف، خط تیره (-) و زیرخط (_) باشد. 
دلیل این امر آن است که وقتی روی npm منتشر میشود یک URL خاص دریافت میکند که مبتنی بر همین مشخصه است. 

version:
– نسخه کنونی را مشخص میسازد. 

main:
– نقطه ورود اپلیکیشن را تعیین میکند. 
زمانی که پکیج را در یک اپلیکیشن ایمپورت میکنیم،
این همان نقطهای خواهد بود که اپلیکیشن برای اکپسورت ماژولها جستجو خواهد کرد. 

private:
– اگر به صورت true تعیین شده باشد، از انتشار تصادفی پکیج روی npm جلوگیری میکند. 

scripts:
– مجموعهای از اسکریپتهای Node را تعریف میکند که میتوان اجرا کرد. 

dependencies:
– فهرستی از پکیجهای npm را که به صورت وابستگی نصب شدهاند تعیین میکند.
بصورت پیش فرض برنامه react شامل سه وابستگی است که به ما امکان می دهد از react , react-dom, react-scripts در جاوا اسکریپت خود استفاده کنیم.
react-scripts مجموعه ای از اسکریپت های توسعه را برای کار با React ارائه می دهد. 
اگر نسخه react به صورت 3_6_16^ باشد، به این معنی که npm جدیدترین نسخه اصلی مطابق با 16_x_x را نصب خواهد کرد. 
در مقابل، اگر چیزی شبیه 7_6_5~ در package.json باشد، به این معنی است که جدیدترین نسخه کوچک منطبق با 5_6_x را نصب خواهد کرد. 

devDependencies:
– فهرستی از پکیجهای npm را تعیین میکند که به صورت «وابستگیهای توسعه» (development dependencies) نصب شدهاند. 

peerDependencies:
در برخی موارد، ما میخواهیم سازگاری بسته خود را با یک host tool یا library بیان کنیم، در حالی که لزوماً نیازی به این host نیست. 
این معمولا به عنوان یک plugin نامیده می شود.
ماژول ما ممکن است یک رابط خاص را نشان دهد، مورد انتظار و مشخص شده توسط host documentation. 

4.2-جواب: این فایل لیست تمام پکیجهای نیازمندی یک پروژه را به همراه شماره دقیق نسخهاش در خود دارد. 
منظور از شماره دقیق نسخه، exact version number است. 
یعنی سه عدد ابتدایی مشخص کننده شماره نسخه، بدون حضور range modifier. و می دانیم که اگر شماره نسخه را اینگونه بنویسیم، موقع نصب پکیج باید حتماً همان شماره نسخه پکیج نصب شود، نه آپدیتهای بعدی آن.
بطور کلی package-lock.json در چند زمینه به ما کمک میکند:
1. مورد اول که به آن اشاره کردیم، آنست که به ما امکان تولید درخت نیازمندیهای یکسان را میدهد. 
به این ترتیب کار اعضای تیم توسعه پروژه، کار پیاده سازی(deployment) پروژه، و همینطور کار continuous integration (و در کل کار هر کس که نیاز دارد دستور npm install را روی پروژهمان اجرا کند) برای بازسازی پروژه مشابه راحت میشود. 
بعنوان مثال دستور جدید npm ci که مخصوص CI/CD است، برای نصب پکیجها مستقیماً از package-lock.json استفاده میکند و سراغ package.json نمیرود.
2. به ما این امکان را میدهد که بدون کامیت کردن دایرکتوری node_modules، در زمانهای مختلف وضعیت فولدر node_modules و پکیجهای داخل آن را بدانیم و بتوانیم بازیابیاش کنیم.
3. اگر چنین فایلی داشته باشیم، براحتی میتوانیم با diff گرفتن از حالتهای این فایل در زمانهای مختلف، تفاوتها و تغییرات درخت نیازمندیها را بصورت واضح ببینیم. 
(ابزار های source control مانند git امکان مقایسه بین حالات مختلف یک فایل در طول زمان را از طریق ابزار یا دستوری به نام diff در اختیار ما می گذارند)
4. بهینه سازی فرایند نصب. موقعی که دستور npm install را اجرا میکنیم، npm اطلاعات(metadata) مربوط به هر پکیج را تحلیل میکند. 
در این بین فایل package-lock.json کاری میکند که اطلاعات تکراری دوباره تجزیه و تحلیل نشوند و از این طریق فرایند نصب را بهینهتر و سریعتر میکند. package-lock.json نوعی package-lock یا lock-file است. 
وقتی lock-file ایجاد میشود، شماره نسخهی تمامی پکیجهای حاضر در درخت نیازمندیها را قفل میکند. 
این کار با استفاده از اطلاعاتی نظیر شماره نسخه، آدرس آن پکیج(location) و یک integrity hash انجام میگیرد. 

4.3-جواب: همه پکیج های create react app در درون آن قرار گرفته که می توانند در npm منتشر شوند. 

4.4-جواب: node modules از روی package Json محاسبه میشه و ساخته میشه و نیازی نیست به گیت فرستاده شود. 
اگر فقط package json و package-lock رو داشته باشیم با زدن npm install فایل node modules را میسازد.
ما به گیت فایل هایی رو میفرستیم که امکان ساختن آنها از روی config پروژه فایل پروژه نباشد.
فایل package-lock.json باید به ریپازیتوری گیت کامیت شود تا افراد دیگر بتوانند آن را واکنشی کنند. 

5-جواب: React سینتکس شبیه به HTML را به جاوا اسکریپت تبدیل می کند. 
این کار را با کمک یک ابزار ویژه به نام Babel، انجام می دهد. اصلی ترین هدف از babel این هست که کدهایی را که می نویسیم بدون مشکل در محیطی که قرار است کد اجرا شود بدون خطا اجرا کنیم.JSX)
JavaScript Extention) افزونهای برای ری اکت است که به ما کمک میکند کدها را مانند کد HTML بنویسیم. 
در واقع یک کد HTML نیست بلکه سینتکسی متفاوت و مبتنی بر HTML/XML از زبان جاوا اسکریپت دارد و به همراه کدهای React استفاده میشود.
JSX همان زبان جاوا اسکریپت و فقط با ساختار دستوری دیگری است که در ایجاد کامپوننتها (Component) و المانهای (Element) مختلف برای React DOM کاربرد دارند.
ما نمی توانیم JSX را در یک مرورگر قرار دهیم و انتظار داشته باشیم که کار کند. ما هم به یک کامپایلر مانند Babel نیاز داریم تا آن را به جاوااسکریپت تبدیل کند و هم React برای استفاده از آن جاوااسکریپت ایجاد شده.

